// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: examplepb/example.proto

package examplepb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg1_Enum1 int32

const (
	Msg1_E1 Msg1_Enum1 = 0
	Msg1_E2 Msg1_Enum1 = 1
	Msg1_E3 Msg1_Enum1 = 2
)

var Msg1_Enum1_name = map[int32]string{
	0: "E1",
	1: "E2",
	2: "E3",
}

var Msg1_Enum1_value = map[string]int32{
	"E1": 0,
	"E2": 1,
	"E3": 2,
}

func (x Msg1_Enum1) Enum() *Msg1_Enum1 {
	p := new(Msg1_Enum1)
	*p = x
	return p
}

func (x Msg1_Enum1) String() string {
	return proto.EnumName(Msg1_Enum1_name, int32(x))
}

func (x *Msg1_Enum1) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Msg1_Enum1_value, data, "Msg1_Enum1")
	if err != nil {
		return err
	}
	*x = Msg1_Enum1(value)
	return nil
}

func (Msg1_Enum1) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12e13b33db3d68d8, []int{0, 0}
}

type Msg1 struct {
	F1                   []byte      `protobuf:"bytes,1,opt,name=f1" json:"f1,omitempty"`
	F2                   *int64      `protobuf:"varint,2,opt,name=f2" json:"f2,omitempty"`
	F3                   *Msg1_Enum1 `protobuf:"varint,3,opt,name=f3,enum=examplepb.Msg1_Enum1" json:"f3,omitempty"`
	F4                   *bool       `protobuf:"varint,4,opt,name=f4" json:"f4,omitempty"`
	F5                   *int64      `protobuf:"varint,5,opt,name=f5" json:"f5,omitempty"`
	F6                   *Msg1_Enum1 `protobuf:"varint,6,opt,name=f6,enum=examplepb.Msg1_Enum1" json:"f6,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Msg1) Reset()         { *m = Msg1{} }
func (m *Msg1) String() string { return proto.CompactTextString(m) }
func (*Msg1) ProtoMessage()    {}
func (*Msg1) Descriptor() ([]byte, []int) {
	return fileDescriptor_12e13b33db3d68d8, []int{0}
}
func (m *Msg1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg1.Merge(m, src)
}
func (m *Msg1) XXX_Size() int {
	return m.Size()
}
func (m *Msg1) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg1.DiscardUnknown(m)
}

var xxx_messageInfo_Msg1 proto.InternalMessageInfo

func (m *Msg1) GetF1() []byte {
	if m != nil {
		return m.F1
	}
	return nil
}

func (m *Msg1) GetF2() int64 {
	if m != nil && m.F2 != nil {
		return *m.F2
	}
	return 0
}

func (m *Msg1) GetF3() Msg1_Enum1 {
	if m != nil && m.F3 != nil {
		return *m.F3
	}
	return Msg1_E1
}

func (m *Msg1) GetF4() bool {
	if m != nil && m.F4 != nil {
		return *m.F4
	}
	return false
}

func (m *Msg1) GetF5() int64 {
	if m != nil && m.F5 != nil {
		return *m.F5
	}
	return 0
}

func (m *Msg1) GetF6() Msg1_Enum1 {
	if m != nil && m.F6 != nil {
		return *m.F6
	}
	return Msg1_E1
}

func init() {
	proto.RegisterEnum("examplepb.Msg1_Enum1", Msg1_Enum1_name, Msg1_Enum1_value)
	proto.RegisterType((*Msg1)(nil), "examplepb.Msg1")
}

func init() { proto.RegisterFile("examplepb/example.proto", fileDescriptor_12e13b33db3d68d8) }

var fileDescriptor_12e13b33db3d68d8 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0x48, 0xd2, 0x87, 0xb2, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38,
	0xe1, 0x12, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x69,
	0x89, 0x79, 0x89, 0x79, 0xc9, 0x19, 0xf9, 0x79, 0xe9, 0xfa, 0x65, 0xa9, 0x45, 0xc5, 0x99, 0xf9,
	0x79, 0x05, 0x49, 0x30, 0x16, 0x44, 0xa7, 0xd2, 0x23, 0x46, 0x2e, 0x16, 0xdf, 0xe2, 0x74, 0x43,
	0x21, 0x3e, 0x2e, 0xa6, 0x34, 0x43, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0xa6, 0x34, 0x08,
	0xdf, 0x48, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x88, 0x29, 0xcd, 0x48, 0x48, 0x95, 0x8b, 0x29,
	0xcd, 0x58, 0x82, 0x59, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x54, 0x0f, 0x6e, 0x9f, 0x1e, 0x48, 0xb3,
	0x9e, 0x6b, 0x5e, 0x69, 0xae, 0x61, 0x10, 0x53, 0x9a, 0x31, 0x58, 0x9b, 0x89, 0x04, 0x8b, 0x02,
	0xa3, 0x06, 0x47, 0x10, 0x53, 0x9a, 0x89, 0x90, 0x38, 0x17, 0x53, 0x9a, 0xa9, 0x04, 0x2b, 0xc8,
	0x18, 0x27, 0xf6, 0xae, 0xad, 0x12, 0xcc, 0xc6, 0x7a, 0x20, 0x85, 0xa6, 0x42, 0x7a, 0x5c, 0x4c,
	0x69, 0x66, 0x12, 0x6c, 0x78, 0xcc, 0x83, 0xa9, 0x37, 0x0a, 0x62, 0x4a, 0x33, 0x53, 0x32, 0xe4,
	0x62, 0x05, 0x8b, 0x0a, 0xb1, 0x71, 0x31, 0xb9, 0x1a, 0x0a, 0x30, 0x80, 0x69, 0x23, 0x01, 0x46,
	0x21, 0x7e, 0x2e, 0x26, 0x57, 0x63, 0x01, 0x26, 0x29, 0xf6, 0x59, 0x60, 0xd5, 0xc6, 0x52, 0xec,
	0x93, 0xc0, 0x0c, 0x03, 0x2b, 0xf6, 0x26, 0x08, 0xc3, 0x49, 0xe3, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x4c, 0x4f, 0x1f,
	0x11, 0x96, 0xd6, 0x70, 0x26, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x47, 0xf3, 0xe9, 0x62, 0x01,
	0x00, 0x00,
}

func (m *Msg1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.F6 != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.F6))
		i--
		dAtA[i] = 0x30
	}
	if m.F5 != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.F5))
		i--
		dAtA[i] = 0x28
	}
	if m.F4 != nil {
		i--
		if *m.F4 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.F3 != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.F3))
		i--
		dAtA[i] = 0x18
	}
	if m.F2 != nil {
		i = encodeVarintExample(dAtA, i, uint64(*m.F2))
		i--
		dAtA[i] = 0x10
	}
	if m.F1 != nil {
		i -= len(m.F1)
		copy(dAtA[i:], m.F1)
		i = encodeVarintExample(dAtA, i, uint64(len(m.F1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExample(dAtA []byte, offset int, v uint64) int {
	offset -= sovExample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F1 != nil {
		l = len(m.F1)
		n += 1 + l + sovExample(uint64(l))
	}
	if m.F2 != nil {
		n += 1 + sovExample(uint64(*m.F2))
	}
	if m.F3 != nil {
		n += 1 + sovExample(uint64(*m.F3))
	}
	if m.F4 != nil {
		n += 2
	}
	if m.F5 != nil {
		n += 1 + sovExample(uint64(*m.F5))
	}
	if m.F6 != nil {
		n += 1 + sovExample(uint64(*m.F6))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F1 = append(m.F1[:0], dAtA[iNdEx:postIndex]...)
			if m.F1 == nil {
				m.F1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F2", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F2 = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F3", wireType)
			}
			var v Msg1_Enum1
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Msg1_Enum1(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F3 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F4", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.F4 = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F5 = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field F6", wireType)
			}
			var v Msg1_Enum1
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Msg1_Enum1(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F6 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExample
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExample
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExample        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExample = fmt.Errorf("proto: unexpected end of group")
)
